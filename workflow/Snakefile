__author__ = "Fritjof Lammers"
__copyright__ = "Copyright 2019, DKFZ"
__email__ = "f.lammers@dkfz-heidelberg.de"
__license__ = ""  # TODO

from os.path import join as path_join
from os import popen
import os
import subprocess
from urllib import request
import re

# data from global config

configfile: config["genome_config"] # "config/config-cluster.json"

snakefile_root_path = os.path.abspath(os.path.dirname(workflow.snakefile))

def get_id_type():
        possible_id_types = ["toplevel", "primary_assembly"]

        species=config["name"]
        datatype="dna"
        build=config["assembly_default"]
        release=config["ensembl_release"]

        url = f"ftp://ftp.ensembl.org/pub/release-{release}/fasta/{species}/{datatype}/"
        print(url)
        resp = request.urlopen(url).read()

        for id_type in possible_id_types:
            if re.search(id_type, str(resp)):
                return id_type
        else:
            return None






def get_assembly_path(l3_variant = "", l4_variant = "unmodified", tracking = False, licensed = False, as_list = False):

    """Generate assembly path depending on supplied parameters.

    :param
    l3_variant : string Identifies the third-level variant, i.e. variants with added / remove sequences .e.g PhiX.
    l4_variant : string Identifies the fourth-level variant i.e. changed in the sequences names. Must not inlcude changes to the genomic coordiantes.
    licensed  : bool Flag for data under proprietary license to be stored in seperate non-public repository.

    :returns
    assembly_path (str) Path to directory where data is stored.
    """

    if licensed:
        basedir = path_join(config["data_repo_dir"], config["licensed_data_dir"])
    else:
        basedir = path_join(config["data_repo_dir"], config["public_data_dir"])


    assembly_path_primary = path_join(basedir, SPECIES, config["assembly_name"])

    l3_variant = f"_{l3_variant}" if l3_variant != "" else ""

    path_elements = [basedir,
            SPECIES,
            config["assembly_name"],
            config["assembly_name"]  + l3_variant,
            l4_variant]

    if as_list:
        return path_elements
    else:
        assembly_path = path_join(*path_elements)
        return assembly_path

LOGS_DIR            = config.get("logs_dir")
SPECIES             = config["scientific_name"].replace(" ", "_")
L3_VARIANT          = config.get("l3_variant", "") # "PhiX"
ENSEMBL_RELEASE     = config["ensembl_release"]
ENSEMBL_ID_TYPE     = get_id_type()
FILENAME_BASE       = config["url_name"] + "." + config["assembly_default"]
ASSEMBLYDIR_VARIANT = get_assembly_path(l3_variant=L3_VARIANT,
                                        l4_variant="unmodified",
                                        licensed=False)
assembly_dir_path = get_assembly_path(l3_variant=L3_VARIANT,
                                        l4_variant="unmodified",
                                        licensed=False, as_list=True)


# define the order of rules to be executed depending on the level3-variant
if "phix" in L3_VARIANT.lower():
     FILENAME_BASE_ADD = FILENAME_BASE + "_phiX"
#     ruleorder: download_fasta > download_gff3 > download_gtf > unzip > download_PhiX > add_PhiX > fasta_link > bwa_index > star_index
else:
     FILENAME_BASE_ADD = FILENAME_BASE
#     ruleorder: download_fasta > download_gff3 > download_gtf > unzip > fasta_link > bwa_index > star_index

# Base directory or git-tag / commit for the wrapper repository
# When using a custom snakemake-wrapper repository, also the branch-name or commit-id must be supplied in the config
WRAPPERBASE = "{wrapper_dir}{wrapper_commit}".format(
    wrapper_dir=config["wrapperdir"],
    wrapper_commit="/"+config["wrapper_custom_commit"] if config.get("wrapper_custom_commit") else ""
)


# retrieve current BWA version
BWA_VERSION = popen("bwa 2>&1 | grep Version | cut -f 2 -d ' ' | cut -f 1 -d '-'").read().strip()

# retrieve current STAR version
STAR_VERSION = popen("STAR --version 2>&1 |grep -Po '[0-9.]+'").read().strip()
print(STAR_VERSION)

final_files =  [f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{ENSEMBL_RELEASE}.gff3",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{ENSEMBL_RELEASE}.gtf",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.amb",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.ann",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.bwt",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.pac",
                f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.sa",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.fai",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.contigInformation.tsv",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLength.tsv",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLenOnlyACGT.tsv",
                f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLenOnlyACGT_realChromosomes.tsv",
                f"{ASSEMBLYDIR_VARIANT}/STAR/",
                f"{ASSEMBLYDIR_VARIANT}/files-structure.txt"]

localrules: fasta_link, unzip, download_PhiX, download_fasta, download_gff3, download_gtf
# define the final set of output files
rule all:
    input: final_files


rule download_fasta:
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.dna.{ENSEMBL_ID_TYPE}.fa.gz"
    params:
        species=config["name"],
        datatype="dna",
        build=config["assembly_default"],
        release=config["ensembl_release"]
    wrapper:
        f"{WRAPPERBASE}/bio/reference/ensembl-sequence"

rule unzip:
    input:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}" + "{suffix}.gz"
        # "{ASSEMBLYDIR_VARIANT}/{file}{suffix}"
    wildcard_constraints:
        suffix=f"(\.{ENSEMBL_RELEASE}\.gtf)|(\.{ENSEMBL_RELEASE}\.gff3)"
        #suffix=f"(\.dna\.{ENSEMBL_ID_TYPE}\.fa)|(\.{ENSEMBL_RELEASE}\.gtf)|(\.{ENSEMBL_RELEASE}\.gff3)"
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}" + "{suffix}"
    shell:
        "gzip -cd {input} > {output}"

rule unzip_fasta:
    input:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.dna.{ENSEMBL_ID_TYPE}.fa.gz"
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.dna.{ENSEMBL_ID_TYPE}.fa"
    shell:
        "gzip -cd {input} > {output}"


rule download_gff3:
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{ENSEMBL_RELEASE}.gff3.gz"
    params:
        species=config["name"],
        fmt="gff3",
        build=config["assembly_default"],
        release=config["ensembl_release"]
    wrapper:
        f"{WRAPPERBASE}/bio/reference/ensembl-annotation"


rule download_gtf:
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{ENSEMBL_RELEASE}.gtf.gz"
    params:
        species=config["name"],
        fmt="gtf",
        build=config["assembly_default"],
        release=config["ensembl_release"]
    wrapper:
       f"{WRAPPERBASE}/bio/reference/ensembl-annotation"

rule download_PhiX:
    output:
        #directory(f"{ASSEMBLYDIR_VARIANT}/PhiX"),
        f"{ASSEMBLYDIR_VARIANT}/PhiX/Illumina/RTA/Sequence/WholeGenomeFasta/genome.fa"
    shell:
        f"curl  http://igenomes.illumina.com.s3-website-us-east-1.amazonaws.com/PhiX/Illumina/RTA/PhiX_Illumina_RTA.tar.gz | " 
        " tar -C  {ASSEMBLYDIR_VARIANT} -xz "

rule add_PhiX:
    input:
        genome_fa=f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{{suffix}}",
        phix_fa=f"{ASSEMBLYDIR_VARIANT}/PhiX/Illumina/RTA/Sequence/WholeGenomeFasta/genome.fa"
    wildcard_constraints:
        suffix=f"dna\.{ENSEMBL_ID_TYPE}\.fa"
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}." + "{suffix}"
    shell:
        "cat {input.genome_fa} {input.phix_fa} > {output}"

rule fasta_link:
    input:
        rules.unzip_fasta.output
        #f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa"
    output:
        #f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.fa"
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa"
    shell:
        "ln -sv $(pwd)/{input} {output}"


rule bwa_index:
    input:
         rules.fasta_link.output
        #f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa"
    output:
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.amb",
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.ann",
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.bwt",
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.pac",
        f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.sa"
    log:
        f"{LOGS_DIR}/bwa_index/{FILENAME_BASE_ADD}.log"
    wrapper:
        f"{WRAPPERBASE}/bio/bwa/index"
#    shell:
#        "bwa index {input}"

rule star_index:
    input:
        fasta = f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa",
        gtf = f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE}.{ENSEMBL_RELEASE}.gtf"
    output:
        directory(f"{ASSEMBLYDIR_VARIANT}/STAR/")
    message:
        "STAR index"
    threads:
        4
    resources:
      mem_mb = 40*1024
    params:
        extra = ""
    log:
        f"{LOGS_DIR}/star_index/{FILENAME_BASE_ADD}.log"
    wrapper:
        "master/bio/star/index"

rule samtools_index:
    input:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa",
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.fai",
    params:
        "" # optional params string
    wrapper:
        "0.66.0/bio/samtools/faidx"

rule contig_information:
    input:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa",
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.contigInformation.tsv"
    log:
        f"{LOGS_DIR}/contig_information/{FILENAME_BASE_ADD}.log"
    wrapper:
        f"{WRAPPERBASE}/bio/reference/genome-contiginformation"

rule chromosome_lengths_full:
    input:
         f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.contigInformation.tsv"
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLength.tsv"
    params:
        real_chromosomes_fun = "| grep -P '^(\d+|X|Y)\s' " # note that is does not work on scaffol-level assembly
    shell:
        "cat {input} | cut -f 1,2 {params.real_chromosomes_fun} \
        > {output}"

rule chromosome_lengths_onlyACGT:
    input:
         f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.contigInformation.tsv"
    output:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLenOnlyACGT.tsv"
    shell:
        "cat {input} | cut -f 1,3  \
        > {output}"

rule chromosome_lengths_onlyACGT_realChromosomes:
    input:
        f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.contigInformation.tsv"
    output:
        report(f"{ASSEMBLYDIR_VARIANT}/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.chrLenOnlyACGT_realChromosomes.tsv",
               category="chromosome_info")
    params:
        real_chromosomes_fun = "| grep -P '^(\d+|X|Y)\s' " # note that is does not work on scaffold-level assembly
    shell:
        "cat {input} | cut -f 1,3 {params.real_chromosomes_fun} \
        > {output}"

rule file_structure_tree:
    input:
        [elem for elem in final_files[:-1]]
    output:
        report(f"{ASSEMBLYDIR_VARIANT}/files-structure.txt")
    shell:
        "tree > {output}"


onsuccess:
    print(assembly_dir_path)
    subprocess.run([os.path.join(snakefile_root_path, "scripts/reference-repo-add.sh"),
                    assembly_dir_path[0],
                    SPECIES,
                    os.path.join(*assembly_dir_path[2:]),
                    ])
                   #os.path.join(*assembly_dir_path[:2]


    #rule store_data:
#     input:
#        # f"{ASSEMBLYDIR_VARIANT}/.git"
#         f"{ASSEMBLYDIR_VARIANT}/logged"
#     output:
#         dir = directory(f"{TRACKING_DIR}/")
#         #flag = f"{TRACKING_DIR}/logged"
#     shell:
#          "cd {output.dir} &&"
#          "git init &&"
#          "git annex init &&"
#          "git remote add data {ASSEMBLYDIR_VARIANT} &&"
#          "git annex sync ;"
#          #"touch logged ;"